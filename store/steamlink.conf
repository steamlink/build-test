#
# configuration for steamlink
# sensetive config item are in ~/.steamlinkrc
#
#PIDFILE="/home/steamlink/prod/steam.pid"
#LOGFILE="/home/steamlink/log/steam.log"

# DBG = 1
pollinterval = 10

my_client_id =  'store1'
allow_short_circuit = False
network_timeout = 4
topic_encode = "SE/%(service)s/%(client_id)s/%(task_id)s/%(direction)s"

# mask payloads with "***"
brief_status = False

# Services
#	type:  server or channel
# 	class:	python class that implements the service
#	topic:	(optional)  mqtt subscription topic, 
#			built "%s/%s/+/q" % (service_id, my_clientid)
services = {
	'SteamDB': {
		'type':  'server',
		'class': 'DBService', 
		'mongourl':  MONGO_URL,
		'mongodb':   MONGO_DB,
		'lazyopen': True,
		},
	'ping': {
		'type':  'server',
		'class': 'PingService',
		},
	'repub': {
		'type':  'channel',
		'class': 'RepubChannel',
		'topic': 'SteamLink/+/+',
		'prefix': 'SteamLink',
		'repubprefix': 'SL'
		},
	'transport': {
		'type':  'channel',
		'class': 'TransportChannel',
		'topic': 'SL/+/+',
		'prefix': 'SL',
		'repubprefix': 'SteamLink'
		},
#	'web': {
#		'type':  'channel',
#		'class': 'WebService',
#		'topic': 'Web/\#'
#		}
}

default_clients = {
	'SteamDB': 'store1',
	'ping': 'store1',
}

#
# translation tables
XLATE = {
  'motion': { 'off':  False,    'on': True },
  'door':   { 'off':  'Closed', 'on': 'Open' },
}


# rules
native_json = {
  'name': 'native_record_json',
  'rules': [['filter', 'selector', 'publish']],
  'filter': {'topic': 'SteamLink/.*/data' },
  'selector': {'pkt:payload': 'Hello World! pkt: (.*) vBat: .*mV',
			   'vbat:payload': 'Hello World! pkt: .* vBat: (.*)mV'},
  'publish': {'protocol': 'mongo',
              'url': 'mongodb://localhost:27017/',
              'db': 'aew_db',
			  'data': {'pkt': '%(pkt)s', 'vbat': '%(vbat)s' },
              'collection': 'vbat' }
}

#hello_msg = {
#  'name': 'hello_msg',
#  'rules': [['filter','', 'publish'],
#            ['mfilter','mselector', 'mpublish']],
#  'filter': {'_sl_id': '153' },
#  'mfilter': {'_sl_id': '153', 'payload': 'Hello World! pkt: (.*) vBat.*' },
#  'publish': {'protocol': 'log', 'data': "%(ts)s: %(payload)s node %(_node_id)s" },
#  'mselector': {'pkt:payload': 'Hello World! pkt: (.*) vBat: .*mV',
#                 'vbat:payload': 'Hello World! pkt: .* vBat: (.*)mV*',
#                 'slid:_sl_id': '(.*)',
#                 'node:_node_id': '(.*)',
#                 'rssi:_rssi': '(.*)'},
#  'mpublish': {'protocol': 'mqtt',
#               'topic': 'test/sl%(slid)s/node%(node)s',
#              }
#}

button_msg = {
  'name': 'button_msg',
  'rules': [['filter', 'selector', 'publish']],
  'filter': {'_sl_id': [['==',4], ['==', 5], ['>', 6]], 'payload': 'Button.*' },
  'selector': {'button:payload': 'Button (.*) pkt.*',
               '_sl_id': '(.*)',
               '_node_id': '(.*)',
               '_mesh': '(mesh_.*)' },
#  'publish': [{'protocol': 'log', 'data': "%(ts)s: button %(button)s" },
  'publish': [{'protocol': 'log', 'logfile': '/home/steamlink/log/buttondata.log'},
              {'protocol': 'mqtt',
               'topic': 'SteamLink/%(_sl_id)s/control',
               'data': {'_sl_id': 0, '_node_id': 0, 'payload': "1" },
               'copy_fields': [['_sl_id', '_sl_id', 'int'],
                               ['_node_id', '_node_id', 'int'],
                               ['_mesh', '_mesh', ''],
                               ['payload', 'button', '']]
              }]
}
#RULES = [native_record, hello_msg, button_msg]
#RULES = [button_msg, native_json]
RULES = []


